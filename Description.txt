**Конфигурация проекта и алгоритм решения:

1. Библиотеки:

Потребуются следующие библиотеки:

JSON (или CSV) для работы с JSON (или CSV) файлами.
Datetime для работы с датой/временем.
Logging для реализации модуля логирования.


2. Файл данных:

Создать JSON (или CSV) файл для хранения заметок.

3. Функционал:

Создание заметки:
Запрашивать у пользователя заголовок, тело заметки.
Создавать экземпляр класса Заметка.
Сохранять заметку в файл.
Список заметок:
Считывать все заметки из файла.
Выводить список заметок (идентификатор, заголовок, дата/время создания).
Редактирование заметки:
Запрашивать у пользователя номер заметки.
Считывать заметку из файла.
Запрашивать изменения (заголовок, тело).
Обновлять заметку в файле.
Удаление заметки:
Запрашивать у пользователя номер заметки.
Удалять заметку из файла.

4. Алгоритм реализации проекта:

- Запуск программы:

Предложить варианты действий (создание, список, редактирование, удаление).
- Выбор действия:

Запрашивать у пользователя номер действия.
Выполнять выбранное действие.

- Работа с файлами:
Использовать JSON (или CSV) библиотеку для чтения/записи данных.

- Интерфейс:
В проекте использованы способы для взаимодействия с пользователем:
Командная строка (ввод параметров)
Меню (выбор действий из списка)

**Методы реализации проекта и выходные данные программы:

1. Реализация пользовательского интерфейса:

Пользовательское Меню:
1. Создать новую заметку
2. Посмотреть список заметок
3. Редактировать заметку
4. Удалить заметку
5. Сохранить заметки в файл
6. Загрузить заметки из файла
7. Выйти из программы

 Для удобства трекинга создания заметок создан модуль логирования logging_config, который реализует запись логов в файл app.log.
 Пример записи:
2024-03-27 18:27:19,158 - INFO - Загружены заметки из файла: r.txt
2024-03-27 18:27:21,608 - INFO - Создана новая заметка
2024-03-27 18:27:46,902 - INFO - Редактирование заметки с ID 2
2024-03-27 18:27:58,624 - INFO - Сохранены заметки в файл: r.txt
2024-03-28 17:09:55,442 - INFO - Создана новая заметка
2024-03-28 17:09:55,442 - INFO - Создана новая заметка
2024-03-28 17:09:55,442 - INFO - Создана новая заметка


2. Тестирование:

в проекте реализованы методы тестирования ошибок, например:
    def edit_note(self):
        note_id = input_note_id()
        new_title, new_body = input_note_details()
        success = self.controller.edit_note(note_id, new_title, new_body)
        if success:
            display_message("Заметка успешно отредактирована.")
        else:
            display_message("Заметка с указанным ID не найдена.")

3 Реализация паттерна MVP для проекта:
- Структура папок проекта:

application_notes/
│
├── app/
│   ├── __init__.py
│   ├── controller.py
│   ├── model.py
│   ├── presenter.py
│   ├── view.py
│   └── logging_config.py
│
└── main.py

- Модули:
__init__.py: Файл, указывающий Python, что это пакет.

controller.py: Модуль, содержащий класс NotesController, управляющий логикой приложения.

model.py: Модуль, содержащий класс Note, представляющий собой заметку.

presenter.py: Модуль, содержащий функции для форматирования данных для отображения.

view.py: Модуль, содержащий функции для отображения пользовательского интерфейса.

logging_config.py: Модуль, содержащий конфигурацию логгирования.

main.py: Основной файл приложения, где запускается программа.

